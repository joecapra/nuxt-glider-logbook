/** *******************************************************************************
 * Handles all the actions for user settings
 * ***************************************************************************** */
import { collection, getDocs, deleteDoc, updateDoc, setDoc, getDoc, query, onSnapshot, where, doc } from 'firebase/firestore'
import { storeToRefs } from 'pinia'

const { db } = useFirestore()
const utils = useUtils()

let aircraftsOnSnapshot: any = null
let airportsOnSnapshot: any = null

const useFirestoreSettings = () => {
	const clearSnapshots = (): void => {
		if (airportsOnSnapshot) airportsOnSnapshot()
		if (aircraftsOnSnapshot) aircraftsOnSnapshot()
	}

	const addAircraft = async (aircraft: Aircraft): Promise<void> => {
		const firestoreStore = useFirestoreStore()
		const { user } = storeToRefs(firestoreStore)
		console.log(`useFirestoreSettings:addAircraft - userId: ${user.value.userId} aircraft: ${aircraft}`)

		try {
			// Add a new document with a generated id
			const aircraftRef = doc(collection(db, 'users', user.value.userId, 'aircraft'))
			/** Get the firestore autogenerated flightId and add it to the flight to be added */
			const aircraftId = aircraftRef.id
			aircraft.id = aircraftId

			////////////////////////////////////////////////////////
			/** Add the new aircraft to the DB */
			await setDoc(aircraftRef, aircraft)
			console.log(`useFirestoreSettings:addAircraft - added aircraftId:`, aircraft.id)
		} catch (error) {
			if (error instanceof Error) {
				useToast(`Error adding aircraft: ${error.message}`)
			} else {
				console.error(`useFirestoreSettings:addAircraft - Error: ${error}`)
			}
		}
	}

	const deleteAircraft = async (aircraftId: string): Promise<void> => {
		const firestoreStore = useFirestoreStore()
		const { user } = storeToRefs(firestoreStore)
		console.log(`useFirestoreSettings:deleteAircraft - Aircraft for userId: ${user.value.userId} aircraftId: ${aircraftId}`)

		try {
			const aircraftRef = doc(db, 'users', user.value.userId, 'aircraft', aircraftId)
			await deleteDoc(aircraftRef)
			console.log(`useFirestoreSettings:deleteAircraft - Aircraft deleted from DB: ${aircraftId}`)
		} catch (error) {
			if (error instanceof Error) {
				useToast(`Error deleting aircraft: ${error.message}`)
			}
			console.log(`useFirestoreSettings:deleteAircraft - Error deleting aircraft aircraftId: ${aircraftId} Error: `, error)
		}
	}

	const addAirport = async (airport: Airport): Promise<void> => {
		const firestoreStore = useFirestoreStore()
		const { user } = storeToRefs(firestoreStore)
		console.log(`useFirestoreSettings:addAirport - userId: ${user.value.userId} aircraft: ${airport}`)

		try {
			/** Hit airport database to get airport lat/lng */
			airport.latlng = await utils.getAirportLatLng(airport.icaocode)

			// Add a new document with a generated id
			const airportRef = doc(collection(db, 'users', user.value.userId, 'airports'))
			/** Get the firestore autogenerated flightId and add it to the flight to be added */
			const airportId = airportRef.id
			airport.id = airportId

			////////////////////////////////////////////////////////
			/** Add the new airport to the DB */
			await setDoc(airportRef, airport)
			console.log(`useFirestoreSettings:addAirport - added airportId:`, airport.id)
		} catch (error) {
			if (error instanceof Error) {
				useToast(`Error adding airport: ${error.message}`)
			} else {
				console.error(`useFirestoreSettings:addAirport - Error: ${error}`)
			}
		}
	}

	const deleteAirport = async (airportId: string): Promise<void> => {
		const firestoreStore = useFirestoreStore()
		const { user } = storeToRefs(firestoreStore)
		console.log(`useFirestoreSettings:deleteAirport - Aircraft for userId: ${user.value.userId} airportId: ${airportId}`)

		try {
			const airportRef = doc(db, 'users', user.value.userId, 'airports', airportId)
			await deleteDoc(airportRef)
			console.log(`useFirestoreSettings:deleteAirport - airport deleted from DB: ${airportId}`)
		} catch (error) {
			if (error instanceof Error) {
				useToast(`Error deleting airport: ${error.message}`)
			}
			console.log(`useFirestoreSettings:deleteAirport - Error deleting airport airportId: ${airportId} Error: `, error)
		}
	}

	const getAircraft = async (userId: string): Promise<void> => {
		console.log(`useFirestoreSettings:getAircraft()`)
		const firestoreStore = useFirestoreStore()
		const { aircrafts } = storeToRefs(firestoreStore)
		const q = query(collection(db, 'users', userId, 'aircraft'))

		/** If we already have an onSnapshot listener running we need to stop(unsubscribe) from it */
		if (aircraftsOnSnapshot) aircraftsOnSnapshot()

		aircraftsOnSnapshot = onSnapshot(q, (querySnapshot) => {
			aircrafts.value = []
			querySnapshot.forEach((doc) => {
				const data = doc.data()
				const aircraft: Aircraft = {
					id: doc.id,
					type: data.type,
					tailnumber: data.tailnumber,
					isdefault: data.isdefault
				}
				aircrafts.value.push(aircraft)
			})
		})
	}

	const getAirports = async (userId: string): Promise<void> => {
		console.log(`useFirestoreSettings:getAirports()`)
		const firestoreStore = useFirestoreStore()
		const { airports } = storeToRefs(firestoreStore)
		const q = query(collection(db, 'users', userId, 'airports'))

		/** If we already have an onSnapshot listener running we need to stop(unsubscribe) from it */
		if (airportsOnSnapshot) airportsOnSnapshot()

		airportsOnSnapshot = onSnapshot(q, (querySnapshot) => {
			airports.value = []
			querySnapshot.forEach((doc) => {
				const data = doc.data()
				const airport: Airport = {
					id: doc.id,
					icaocode: data.icaocode,
					latlng: data.latlng,
					isdefault: data.isdefault
				}
				airports.value.push(airport)
			})
		})
	}

	const setDefaultAircraft = async (aircraftId: string): Promise<void> => {
		const firestoreStore = useFirestoreStore()
		const { user } = storeToRefs(firestoreStore)
		console.log(`useFirestoreSettings:getAirports()`)

		/** Get a snapshot of all the items on the airports collection */
		const aircraftQ = query(collection(db, 'users', user.value.userId, 'aircraft'))
		const aircraftQuerySnapshot = await getDocs(aircraftQ)

		/**
		 * We want to wait for all aircraft to be deleted before
		 * we try to delete the parent user document.
		 */
		await Promise.all(
			aircraftQuerySnapshot.docs.map(async (doc) => {
				let defaultVal = true
				if (doc.data().id !== aircraftId) {
					defaultVal = false
				}
				await updateDoc(doc.ref, { isdefault: defaultVal })
			})
		)
	}

	const setDefaultAirport = async (airportId: string): Promise<void> => {
		console.log(`useFirestoreSettings:getAirports()`)
		const firestoreStore = useFirestoreStore()
		const { user } = storeToRefs(firestoreStore)

		/** Get a snapshot of all the items on the airports collection */
		const airportQ = query(collection(db, 'users', user.value.userId, 'airports'))
		const airportQuerySnapshot = await getDocs(airportQ)

		/**
		 * We want to wait for all aircraft to be deleted before
		 * we try to delete the parent user document.
		 */
		await Promise.all(
			airportQuerySnapshot.docs.map(async (doc) => {
				let defaultVal = true
				if (doc.data().id !== airportId) {
					defaultVal = false
				}
				await updateDoc(doc.ref, { isdefault: defaultVal })
			})
		)
	}

	return {
		clearSnapshots,
		addAircraft,
		deleteAircraft,
		addAirport,
		deleteAirport,
		getAircraft,
		getAirports,
		setDefaultAircraft,
		setDefaultAirport
	}
}

export default useFirestoreSettings
